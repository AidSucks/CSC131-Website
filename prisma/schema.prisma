generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  emailVerified DateTime?
  image         String?
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model AuthorizedUser {
  email    String @id @unique
  username String
  role     Role
}

enum Role {
  MODERATOR
  ADMINISTRATOR
}

model CustomerInquiry {
  id                String   @id @default(cuid())
  fullName          String
  contactEmail      String
  contactPhone      String?
  servicesRequested String[]
  message           String?
}

model CustomerAppointment {
  id               String   @id @default(cuid())
  fullName         String
  contactEmail     String
  contactPhone     String?
  message          String?
  submittedDate    DateTime
  appointmentStart DateTime
  appointmentEnd   DateTime
}

model AvailabilityRule {
  dayOfWeek           DayOfWeek @id
  allowedAppointments Json[]
}

model SpecialUnavailabilityRule {
  id        String   @id @default(cuid())
  note      String?
  startDate DateTime
  endDate   DateTime
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
